name: Import podcast episodes

on:
  # This workflow may be run manually from the Actions tab
  workflow_dispatch:
  # This workflow run on a schedule
  schedule:
  # Cron spec is quoted because * is a special character in YAML
  # Run at 20:00, then again at 20:15 by when the transcription should have completed
  #        M     H   DoM M   DoW
  - cron: '5,20  19  *   *   *'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent import
concurrency:
  group: "import"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Import job
  import:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.import.outputs.result }}
    steps:
    - name: Configure git
      run: |
        git config --global user.email "import@noreply.github.com"
        git config --global user.name "import-workflow"
        git config --global init.defaultBranch main
    - name: Checkout the git repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Update submodules to the latest commit, even if the superproject references older commits
      run: git submodule update --remote
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f incharge-podcaster/requirements.txt ]; then pip install -r incharge-podcaster/requirements.txt; fi
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Import podcast episodes
      id: import
      run: |
        source incharge-podcaster/import.sh
        echo "result=$IMPORT_RESULT" >> $GITHUB_OUTPUT
      env:
        GOOGLE_API_KEY: ${{ vars.GOOGLE_API_KEY }}
        NODE_ENV: ${{ vars.NODE_ENV }}
          
  deploy:
    needs: import
    if: ${{ needs.import.outputs.result == 'PUSHED' }}
    # Why doesn't this work? 
    # if: ${{ needs.import.steps.import.outputs.result == 'PUSHED' }}
    uses: ./.github/workflows/deploy.yaml
